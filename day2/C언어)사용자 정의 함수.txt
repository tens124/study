#include<stdio.h>

int factorial(int n);			//사용자 정의 함수 선언. 코드 앞부분에는 함수 이름과 매개변수만 작성하고 구현부는 따로 작성함으로써 가독성을 높일 수 있다
					//사용자 정의 함수 구조 : 함수가 결과적으로 리턴할 자료형/함수 이름(매개변수);
					//C언어는 main 함수 이전에 서술된 함수는 컴파일러가 인식만 할 뿐, 따로 작동하지는 않음
					//이처럼 컴파일러에게 사용될 함수에 대한 정보를 미리 알리는 것을 프로토타입이라 한다
					//구현부는 main 함수 뒷부분에 따로 작성하거나, 여기서 선언과 구현을 한 블록 안에서 동시에 작성하는 것도 가능

main()
{
	int (*pf)(int);		//정수형 인수(매개변수) 한 개를 받는 정수형 함수 포인터 pf를 선언
					//int *pt로는 일반적인 정수형 포인터를 선언 가능
					//이 형식을 조금 바꿔서, 함수와 비슷한 형태(이름(매개변수))의 포인터를 작성하는 것
					//int *pf (int)는 반환 타입이 int*이고 매개변수로 int를 받는 함수 선언 (잘못된 형태)

	pf = factorial;		//factorial 함수의 시작 주소를 pf에 저장
	printf("%d", pf(3));		//3을 pf로 전달. 그 결과값을 출력. pf에는 함수의 시작 주소가 저장되어 있으니, pf 호출은 함수를 실행시킨다는 것을 의미함
}

int factorial(int n)			//factorial 함수의 시작점. 실행할 오퍼레이터를 작성해 둠
					//재귀함수로, 계속해서 자기 자신을 호출하는 구조. n값을 1이 될 때까지 1씩 빼주며 계속 곱해준다
{
	if(n<=1)			//최초에 3이 전달되었으니 else문이 실행됨. return 3 * factorial(2);
					//factorial에 2가 전달되면 또 한 번 else문 실행. return 3 * 2 * factorial(1);
					//1이 전달되면 if문 실행. return 3 * 2 * 1;
					//이렇게 완성된 최종값을 함수를 호출한 곳으로 전송. 결과적으로 전달받은 수의 팩토리얼을 구해주는 함수가 완성됨
	{
		return 1;
	}
	else
	{
		return n * factorial(n-1);
	}
}