class Parent
{
	int x = 1000;

	Parent()
	{
		this(3000);		//this는 메소드가 소속되어 있는 클래스(객체)를 의미하는 예약어
					//this에 괄호를 붙인 thsi()는 생성자를 호출하는 데 사용. 객체명과 생성자명은 동일하기 때문이라고 생각하면 편하다 
	}
	
	Parent(int x)
	{
		this.x = x;		//Parent에 소속된 변수 x를 의미함. x에 전달받은 인수의 값을 저장
	}
}
//Parent 객체를 생성하게 되면 우선 Parent() 생성자가 호출되어 this(3000) 코드가 실행
//this(3000) 코드는 Parent(int x)에 3000을 전달한다는 의미. 따라서 최종적으로 Parent의 필드변수 x에는 3000이 저장됨

class Child extends Parent
{
	//어떤 클래스를 상속받는 클래스의 경우, 가장 윗줄에 super()가 묵시적으로 포함되어 있음
	//super는 부모 객체를 의미
	//super()는 부모 객체의 생성자를 호출하는 코드. 자식 클래스를 호출하면, 부모 클래스의 생성자 또한 자동으로 호출되는 것
	//이는 리스코프 치환 원칙을 위한 설계

	int x = 4000;

	Child()
	{
		this(5000);
	}

	Child(int x)
	{
		this.x = x;
	}

	int getX()		//생성자가 아닌, 클래스에 포함된 메소드. Child 클래스의 필드변수 x값을 리턴
	{
		return this.x;
	}
}

//Child 객체를 생성하게 되면 묵시적으로 생성된 super()코드에 의해 Parent() 생성자가 호출되어 this(3000) 코드가 실행
//this(3000) 코드는 Parent(int x)에 3000을 전달한다는 의미. 따라서 최종적으로 Parent의 필드변수 x에는 3000이 저장됨
//그 후 Child 객체의 생성자 Child() 실행
//this(5000)에 의해 Child(5000) 코드가 작동
//Child 객체의 필드 변수 x에 5000 저장

public class Test
{
	public static void main(String[] args)
	{
		Child c = new Child();		//Child 객체 c를 생성
		System.out.println(c.getX());	//c 객체 내부에 존재하는 x 값을 출력. 5000이 출력됨
	}
}