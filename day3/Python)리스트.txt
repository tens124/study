#파이썬에서는 변수 자료형을 선언하지 않음. 저장되는 값에 따라 자연스럽게 정해짐
#문자와 문자열은 ' '/" "/''' '''/""" """을 구분 없이 사용하여 표현할 수 있음
#세미콜론을 사용하지 않음(한 줄에 여러 명령어를 작성할 때는 사용할 수 있음)
#코드 블록은 중괄호 대신 : 와 들여쓰기 깊이로 구분


x, y = input('입력 : ').split('-')		#화면에 입력 : 이 출력된 후 커서가 깜빡이며 입력을 기다림
						#키보드로 값을 입력 후 엔터를 누르면 입력된 값이 split으로 지정된 분리문자 -를 기준으로 나뉨
						#xyz321-opq654 입력 ->x엔 xyz321이, y엔 opq654가 저장됨
						#파이썬에서는 변수 선언에 자료형을 붙여주지 않아도 됨. 저장되는 값에 따라 자동으로 결정된다

						#input() 메소드 : 괄호 안의 내용을 출력하여 보여주고 커서가 반짝이며 입력을 기다림
						#split(분리문자) 메소드 : 문자열을 분리문자를 기준으로 나눠줌

a = ['abc123', 'def456', 'ghi789']	#리스트 a를 선언하며 초기값을 지정. 초기값으로 설정된 수만큼 리스트의 요소가 생성됨
						#3개의 공간에 문자열 세 개가 저장
						#리스트는 공간 확장과 축소가 자유롭기에 크기를 미리 지정하지 않아도 됨
						#또한 여러 가지 자료형을 동시에 저장 가능

						#양수 인덱스 : 0부터 시작해서 인덱스 크기 - 1까지						
						#음수 인덱스 : -(리스트 크기)부터 -1까지

a.append(x)					#a리스트의 마지막에 x변수의 값을 추가
a.append(y)					#a리스트의 마지막에 y변수의 값을 추가
a.remove('def456')			#a리스트의 요소 중 def456을 찾아 삭제
						#최종적으로 ['abc123', 'ghi789', 'xyz321', 'opq654']가 리스트에 존재

						#append(변수 or 값) : 리스트의 마지막 자리에 해당 내용을 추가
						#remove(변수 or 값) : 리스트에서 해당 내용을 삭제

print(a[1][-3:], a[2][:-3], sep = ',')	#a[1]과 a[2]의 요소를 슬라이스하고 ,로 구분하여 출력. 그 후 커서는 다음줄로
						#[시작위치:끝위치] 끝위치는 포함하지 않음. 즉 시작위치~끝위치 앞(끝위치는 제외)까지 출력
						#시작위치 생략 시 처음부터. 끝위치 생략 시 인덱스 끝까지
						#a[1][-3:]은 ghi789에서 -3부터 문자열 끝까지 출력. 즉 789 출력
						#a[2][:-3]은 xyz321에서 처음부터 -3의 앞까지 출력. 즉 xyz 출력
						#sep은 분리문자. 출력할 값들을 쉼표로 구분하여 출력. 결과적으로 789,xyz 출력됨

						#print() 함수. print(출력값1, 출력값2, ..., sep=분리문자, end=종료문자)
						#분리문자는 출력값들을 연속적으로 출력하지 않고 해당 문자를 출력값 사이에 넣어서 출력. 생략 시 기본값은 공백 한 칸
						#종료문자는 마지막에 표시할 문자. 생략 시 기본값은 다음 줄로 커서 이동

for i in range(3,6) :			#for은 반복문. in range를 통해 반복 범위를 조절 가능
						#이 경우에도 역시 끝위치는 포함하지 않는다. i에 3~5가 순차적으로 저장됨
						#파이썬은 코드블록을 중괄호 대신 : 와 들여쓰기로 대체. :로 시작점을 결정 후, 들여쓰기를 통해 실행 코드를 조절
	print(i, end = ' ')			#각 반복횟수마다 실행될 구문. i 출력 후 공백 추가
						#3 4 5 출력. 종료문자가 공백이기에 커서는 다음 줄로 옮겨가지 않음