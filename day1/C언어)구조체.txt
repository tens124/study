#include <stdio.h>

struct jsu
{
	char nae[12];
	int os, db, hab, hhab;
};

구조체 jsu의 구조
char nae[12]	nae[0] ..... nae[11]
int os
int db
int hab
int hhab
위의 구조체는 메모리의 연속된 공간 내에 저장되어 있음. 12바이트의 nae배열과 각각 4바이트씩의 int 변수들이 연속되어 있는 형태

main()
{
	struct jsu st[3] = { {"데이터1",95,88}, {"데이터2",84,91}, {"데이터3",86,75} };
	//크기 3의 jsu형 배열 st를 생성 후 초기화
	//st[0] : 문자열을 저장하니 '데','이','터','1','\0' 이 nae를 채우고, os에 95, db에 88 저장
	//st[1] : 문자열을 저장하니 '데','이','터','2','\0' 이 nae를 채우고, os에 84, db에 91 저장
	//st[2] : 문자열을 저장하니 '데','이','터','3','\0' 이 nae를 채우고, os에 86, db에 75 저장
	//문자의 경우, 영문과 숫자는 1바이트, 한글은 2바이트씩 차지

	struct jsu* p;	//jsu형 데이터의 주소를 가리킬 수 있는 포인터 변수 p 생성

	p = &st[0];		//p에 st[0]의 주소를 저장

	//구조체의 경우 포인터명->구조체 내부의 변수명 = 값 의 형식으로 구조체 내부의 변수에 값을 저장 가능. 포인터 변수는 특정한 구조체의 주소 가리키고 있으니 포인터 변수의 이름으로 구조체를 찾고, 그 내부의 변수명으로 값을 할당 가능
	//p는 st[0]의 주소를 가리키고 있음. 따라서 p->을 통해 해당 구조체 내부의 변수에 접근 가능

	(p + 1)->hab = (p+1)->os+(p+2)->db;
	//단계별로 나누어 이해할 필요가 있음
	//1.p+1이 가리키는 곳(st[1])의 hab 변수를 호출
	//2.p+1이 가리키는 곳(st[1])의 os 변수 값 84을 호출/p+2가 가리키는 곳(st[2])의 db 변수 값 75를 호출. 그 후 둘을 합쳐줌
	//3.결과값을 호출해둔 hab 변수에 저장함. 결과적으로 159가 st[1]의 hab에 저장됨

	(p + 1)->hhab = (p+1)->hab+p->os+p->db;
	//1.p+1이 가리키는 곳(st[1])의 hhab 변수를 호출
	//2.p+1이 가리키는 곳(st[1])의 hab 변수 값 159를 호출/p가 가리키는 곳(st[0])의 os 변수 값 95를 호출/p가 가리키는 곳(st[0])의 db 변수 값88을 호출 그 후 셋을 합쳐줌
	//3.결과값 342를 호출해둔 hhab 변수에 저장함

	printf("%d", (p+1)->hab+(p+1)->hhab);
	//p+1이 가리키는 곳의 hab 변수 값과 p + 1이 가리키는 곳의 hhab 변수 값을 합쳐줌. 결과적으로 501이 출력됨
}