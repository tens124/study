public class Test		//자바는 아무리 작은 프로그램이라 해도 반드시 클래스 형태로 작성
{
	public static void main(String[] args)	//자바의 프로그램 실행 진입점
								//자바에서는 클래스의 인스턴스가 구현되어야만 JVM에서 인식 가능
								//하지만 클래스의 인스턴스를 구현하려면 우선 프로그램이 구동되어야 한다
								//따라서 프로그램 실행 진입점인 main 메소드에 static을 붙여 정적 메소드로 구현
								//정적 메소드는 인스턴스 구현 없이도 JVM이 인식 및 호출 가능
	
								//public static void main(String[] args) 이 형태가 시그니처. 이외의 형식은 문법 오류로 인해 실행 불가
								//public: main 메소드는 공용으로 접근 가능해야 하며, JVM이 접근할 수 있어야 함															//static: 메소드는 클래스의 인스턴스 없이 호출될 수 있어야 함								
								//void: main 메소드는 값을 반환하지 않으며, 종료 상태 코드는 운영 체제나 JVM에 의해 처리됨												//String[] args: 명령줄 인수를 배열 형태로 받아들임	
								//이외의 형식을 사용할 경우 JVM이 인식 불가. 따라서 실행되지 않음
	{
		String str = "agile";			//자바에는 String 변수에 문자열을 저장하는 것이 가능
		int x[] = {1,2,3,4,5};			//배열 변수 선언은 int[] x/int []x/int x[] 전부 가능. 상당히 유연
		char y[] = new char[5];			//자바에서는 변수 생성 시 자동으로 초기화 됨. 다섯 칸의 배열이 생성되며, char형의 경우 \u0000(유니코드 0, NULL문자)이 저장됨
		int i = 0; // 자바에서는 로컬 변수를 선언할 때 명시적으로 초기화해야 함. 그렇지 않은 변수를 사용할 경우 컴파일 오류가 발생. 따라서 초기화 필수
		//배열 선언과 클래스의 멤버 변수(필드)의 경우에만 자동으로 초기화가 됨
		//int 타입: 기본값은 0
		//char 타입: 기본값은 '\u0000'
		//boolean 타입: 기본값은 false
		//객체 변수: 기본값은 null

		while (i < str.length())			//length() 메소드는 문자열의 길이를 측정. 가장 끝 인덱스 + 1(문자열의 인덱스는 0부터 시작하기에)
		{
			y[i] = str.charAt(i);		//charAt(int i) 메소드는 문자열의 해당 위치에 해당하는 문자값을 리턴
			i++;
		}
		
		for(int p : x)					//향상된 for문. x 배열의 모든 요소를 순회하며 차례차례 p에 저장
		{
			i--;
			System.out.print(y[i]);
			System.out.print(p + "	");
			//y[i]값과 p가 붙어서 출력된 후 몇 칸 띄어쓰기		
		}
	}
}